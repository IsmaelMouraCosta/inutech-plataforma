import { NextAuthOptions } from 'next-auth'
import GoogleProvider from 'next-auth/providers/google'
import { PrismaAdapter } from '@next-auth/prisma-adapter'
import { prisma } from './prisma'

/**
 * üîê ARQUIVO CR√çTICO - PROTEGIDO PELO SECURITY_PROTOCOL.md
 * 
 * ‚ö†Ô∏è ATEN√á√ÉO:
 * - Este arquivo cont√©m configura√ß√µes sens√≠veis de autentica√ß√£o
 * - NUNCA modifique sem backup pr√©vio
 * - NUNCA commite com credenciais hardcoded
 * - Sempre use vari√°veis de ambiente
 */

// Dom√≠nios permitidos para acesso √† plataforma
const ALLOWED_DOMAINS = ['inutech.org.br']

// Emails com permiss√µes de administrador
const ADMIN_EMAILS = [
  'webmaster@inutech.org.br',
  'andrehsiqueira@inutech.org.br',
  'ismael.costa@inutech.org.br'
]

/**
 * Configura√ß√£o do NextAuth.js v4
 * 
 * @see https://next-auth.js.org/configuration/options
 */
export const authOptions: NextAuthOptions = {
  // Adapter do Prisma para persist√™ncia de sess√µes e usu√°rios
  adapter: PrismaAdapter(prisma),

  // Providers de autentica√ß√£o
  providers: [
    GoogleProvider({
      clientId: process.env.GOOGLE_CLIENT_ID || '',
      clientSecret: process.env.GOOGLE_CLIENT_SECRET || '',
      
      // Perfil do usu√°rio retornado pelo Google
      profile(profile) {
        return {
          id: profile.sub,
          name: profile.name,
          email: profile.email,
          image: profile.picture,
          emailVerified: profile.email_verified ? new Date() : null,
        }
      },
    }),
  ],

  // P√°ginas customizadas
  pages: {
    signIn: '/auth/signin',
    error: '/auth/signin',
  },

  // Estrat√©gia de sess√£o (JWT para melhor performance)
  session: {
    strategy: 'jwt',
    maxAge: 30 * 24 * 60 * 60, // 30 dias
  },

  // Callbacks para controle de acesso e sess√£o
  callbacks: {
    /**
     * Callback de autoriza√ß√£o - Controla quem pode fazer login
     */
    async signIn({ user, account, profile }) {
      // Verificar se o email existe
      if (!user.email) {
        console.log('‚ùå Login bloqueado: Email n√£o fornecido')
        return false
      }

      // Extrair dom√≠nio do email
      const emailDomain = user.email.split('@')[1]
      
      // Verificar se o dom√≠nio est√° na lista de permitidos
      const isAllowedDomain = ALLOWED_DOMAINS.includes(emailDomain)
      
      // Verificar se √© um email de admin
      const isAdmin = ADMIN_EMAILS.includes(user.email)

      // Permitir acesso se for dom√≠nio permitido OU admin
      if (isAllowedDomain || isAdmin) {
        const roleLabel = isAdmin ? 'ADMIN' : 'MEMBER'
        console.log('‚úÖ Login autorizado: ' + user.email + ' (' + roleLabel + ')')
        return true
      }

      // Bloquear outros dom√≠nios
      console.log('‚ùå Login bloqueado: ' + user.email + ' - Dom√≠nio @' + emailDomain + ' n√£o autorizado')
      console.log('   Dom√≠nios permitidos: ' + ALLOWED_DOMAINS.join(', '))
      
      return false
    },

    /**
     * Callback JWT - Adiciona informa√ß√µes customizadas ao token
     */
    async jwt({ token, user }) {
      // Na primeira autentica√ß√£o, adicionar dados do usu√°rio ao token
      if (user) {
        token.id = user.id
        token.email = user.email
        token.name = user.name
        token.picture = user.image
        
        // Verificar se √© admin
        token.isAdmin = ADMIN_EMAILS.includes(user.email || '')
        
        // Verificar se √© membro iNuTech
        const emailDomain = user.email?.split('@')[1] || ''
        token.isInutechMember = ALLOWED_DOMAINS.includes(emailDomain)
      }

      return token
    },

    /**
     * Callback Session - Disponibiliza dados do token na sess√£o
     */
    async session({ session, token }) {
      // Adicionar informa√ß√µes customizadas √† sess√£o
      if (session.user && token) {
        session.user.id = token.id as string
        session.user.email = token.email as string | null
        session.user.name = token.name as string | null
        session.user.image = token.picture as string | null
        
        // Informa√ß√µes adicionais
        // @ts-ignore - Adicionar propriedades customizadas
        session.user.isAdmin = token.isAdmin as boolean
        // @ts-ignore
        session.user.isInutechMember = token.isInutechMember as boolean
      }

      return session
    },
  },

  // Eventos de autentica√ß√£o (para logging)
  events: {
    async signIn({ user, isNewUser }) {
      if (isNewUser) {
        console.log('üéâ Novo usu√°rio registrado: ' + (user.email || 'unknown'))
      } else {
        console.log('üë§ Usu√°rio logado: ' + (user.email || 'unknown'))
      }
    },
    
    async signOut({ token }) {
      console.log('üëã Usu√°rio deslogado: ' + (token?.email || 'unknown'))
    },
  },

  // Configura√ß√µes de debug (apenas em desenvolvimento)
  debug: process.env.NODE_ENV === 'development',

  // Secret para criptografia de tokens (OBRIGAT√ìRIO)
  secret: process.env.NEXTAUTH_SECRET,
}

/**
 * Utilit√°rios de autentica√ß√£o
 */
export const authUtils = {
  /**
   * Verificar se um email √© de um dom√≠nio permitido
   */
  isAllowedEmail(email: string): boolean {
    const domain = email.split('@')[1]
    return ALLOWED_DOMAINS.includes(domain)
  },

  /**
   * Verificar se um email √© de administrador
   */
  isAdminEmail(email: string): boolean {
    return ADMIN_EMAILS.includes(email)
  },

  /**
   * Obter mensagem de erro para dom√≠nio n√£o autorizado
   */
  getDomainErrorMessage(email: string): string {
    const domain = email.split('@')[1]
    return 'Apenas emails dos dom√≠nios ' + ALLOWED_DOMAINS.join(', ') + ' s√£o permitidos. Seu email (@' + domain + ') n√£o est√° autorizado.'
  },

  /**
   * Lista de dom√≠nios permitidos
   */
  getAllowedDomains(): string[] {
    return [...ALLOWED_DOMAINS]
  },

  /**
   * Lista de emails administradores (sem expor as senhas)
   */
  getAdminCount(): number {
    return ADMIN_EMAILS.length
  }
}
